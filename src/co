#!/bin/sh

# escapes backticks, dollar signs, double quotes, and backticks
sanitize_string () {
	cat | sed -r 's|([`$"\])|\\&|g'
}

# 0 if integer
is_int () {
	local absloute="$1"

	# remove sign
	case "$absloute" in
		-*) absloute="${1#*-}"
	esac
	
	case "$absloute" in
		''|*[!0-9]*) return 1 ;;
		*) return 0 ;;
	esac
}

# 0 if positive integer
is_pos  () {
	if ! is_int "$1"; then
		return 1
	fi

	if [ "$1" -gt 0 ]; then
		return 0
	else
		return 1
	fi
}

# splits two numbers separated by a colon
split_range () {
	# split on the colon
	index1="${1%%:*}"
	index2="${1#*:}"

	# reject bad tokens
	if ! is_int "$index1"; then
		return 1
	fi
	if ! is_int "$index2"; then
		return 1
	fi
}

# swaps index1 with index2 if the first is greater
arrange_indices () {
	# smaller index should be the first
	if [ "$index1" -gt "$index2" ]; then
		local temp="$index1"
		index1="$index2"
		index2="$temp"
	fi
}

# decorates stdin
highlight_lines () {
	if [ -t 1 ] && [ "$co_decorate" -eq 1 ]; then
		awk "{if(NR%2) print \"$co_even_decoration\"\$0; else print \"$co_odd_decoration\"\$0}"
		printf "$(tput sgr0)"
	else
		cat
	fi
}

# writes the answer variable
write_ans () {
	echo "$1"

	# delete last line first (i.e., ans="value")
	head -n -1 ~/.co/ans.sh > ~/.co/ans-temp
	mv ~/.co/ans-temp ~/.co/ans.sh
	
	# append the new assignment
	local lvalue="$co_ans_prefix"
	local rvalue="\"$(echo "$1" | sanitize_string)\""
	echo "$lvalue=$rvalue" >> ~/.co/ans.sh


	# prepend shiftings (i.e., ans2="$ans1", ans1="$ans", etc.)
	variables_count="$(wc -l ~/.co/ans.sh | awk '{print $1}')"
	
	if [ "$variables_count" -lt "$co_ans_max" ]; then
		if [ "$variables_count" -eq 1 ]; then
			echo "$co_ans_prefix$variables_count=\"\$$co_ans_prefix\"" | cat - ~/.co/ans.sh > ~/.co/ans-temp
			mv ~/.co/ans-temp ~/.co/ans.sh
		elif ! [ "$variables_count" -eq 0 ]; then 
			echo "$co_ans_prefix$variables_count=\"\$$co_ans_prefix$(expr $variables_count - 1)\"" | cat - ~/.co/ans.sh > ~/.co/ans-temp
			mv ~/.co/ans-temp ~/.co/ans.sh
		fi
	fi

	touch ~/.co/ans-dirt
}

load_configuration () {
	mkdir -p ~/.co/
	touch ~/.co/ans.sh ~/.co/populate.sh ~/.co/output ~/.co/conf

	# default configuration
	co_lines_max=50
	co_lines_prefix=l
	co_ans_prefix=ans
	co_ans_max=10
	co_even_decoration="$(tput bold)"
	co_odd_decoration="$(tput sgr0)"
	co_decorate=1

	# override default configuration
	. ~/.co/conf
}

handle_stdin () {
	# stdin
	if ! [ -t 0 ]; then
		# if no arguments are provided, pipe the output to the user also,
		# otherwise just write the buffer to a file and leave the argumetns to
		# be handled later
		if [ "$#" -eq 0 ]; then
			tee ~/.co/output | nl -ba | highlight_lines
		else
			cat > ~/.co/output
		fi

		# --- exporting line variables --- #
		
		# <prefix><line_nr>="<sanitized_line>"

		# consider the first n lines only (speicified by configuration)
		head -n$co_lines_max ~/.co/output | \
		# escape backticks, dollar signs, double quotes and backslashes
		sanitize_string | \
		# enclose in double quotes and prepend an equal sign
		sed 's|\(.*\)|="\1"|g' | \
		# prepend line number
		awk '{printf("%d%s\n", NR, $0)}' | \
		# prepend prefix
		sed -e "s/^/$co_lines_prefix/" > ~/.co/populate.sh
		# raise the dirty flag (that sounds like an idiom (but it isn't))
		touch ~/.co/dirt

		# --- done exporting first n line variables --- #
	fi
}

handle_args () {
	# co help
	if [ "$#" -eq 1 ] && [ "$1" = help ]; then
		cat "$(dirname $(which co))/../README" | less
	
	# co clear
	elif [ "$#" -eq 1 ] && [ "$1" = clear ]; then
		# evacuate the double quotes
		sed -i -e 's/".*$/""/g' ~/.co/populate.sh
		sed -i -e 's/".*$/""/g' ~/.co/ans.sh
		
		# empty the buffer
		> ~/.co/output

		# raise dirty flag
		touch ~/.co/dirt
		touch ~/.co/ans-dirt

	# co
	elif [ "$#" -eq 0 ] && [ -t 0 ]; then
		nl -ba ~/.co/output | highlight_lines

	# co J
	elif [ "$#" -eq 1 ] && is_pos "$1"; then
		local ans="$(tail -n "+$1"  ~/.co/output | head -n 1)"
		write_ans "$ans"
	
	# co J K
	elif [ "$#" -eq 2 ] && is_pos "$1" && is_int "$2"; then
		local awkparam=$2

		# handle words of negative index
		if [ "$awkparam" -lt 0 ]; then
			awkparam="(NF+1$2)"
		fi

		local ans=$(tail -n "+$1"  ~/.co/output | head -n 1 | awk  "{print \$$awkparam}")
		write_ans "$ans"

	# co J:K
	elif [ "$#" = 1 ] && split_range "$1"; then
		arrange_indices
		awk "NR==$index1, NR==$index2" ~/.co/output

	# co J K:L
	elif test "$#" -eq "2" && is_pos "$1" && split_range "$2"; then
		local line="$(tail -n "+$1"  ~/.co/output | head -n 1)"
		local words_count="$(echo "$line" | awk '{print NF}')"

		if [ "$index1" -lt 0 ]; then
			index1="$(expr $index1 + $words_count + 1)"
		fi

		if [ "$index2" -lt 0 ]; then
			index2="$(expr $index2 + $words_count + 1)"
		fi
		
		arrange_indices

		local ans="$(echo $line | awk "{ split(\$0, a, \"\\\\s+\", s); for (i = $index1; i <= $index2 && i <= length(a); i++) printf \"%s%s\", a[i], (i < $index2 ? s[i] : \"\\n\") }")"
		write_ans "$ans"
	else
		exit 1
	fi
}

main () {
	# notify the interactive shell when we exit so it handles our variables
	trap "kill -CONT $PPID" TERM EXIT INT

	load_configuration
	handle_stdin "$@"
	handle_args "$@"
}

main "$@"

